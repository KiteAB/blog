<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - K1t3AB&#39;s Blog</title>
        <link>https://blog.kiteab.me/posts/</link>
        <description>所有文章 | K1t3AB&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>kiteab233@proton.me (K1t3AB)</managingEditor>
            <webMaster>kiteab233@proton.me (K1t3AB)</webMaster><lastBuildDate>Sun, 13 Dec 2020 20:52:42 &#43;0800</lastBuildDate><atom:link href="https://blog.kiteab.me/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Xah Fly Keys 与 Magit 的组合方案 (Deprecated)</title>
    <link>https://blog.kiteab.me/emacs-xah-magit/</link>
    <pubDate>Sun, 13 Dec 2020 20:52:42 &#43;0800</pubDate><author>
        <name>K1t3AB</name>
    </author><guid>https://blog.kiteab.me/emacs-xah-magit/</guid>
    <description><![CDATA[<p>虽然说没几个人把 <a href="https://github.com/xahlee/xah-fly-keys" target="_blank" rel="noopener noreffer">Xah Fly Keys</a> 和 <a href="https://github.com/magit/magit" target="_blank" rel="noopener noreffer">Magit</a> 放在一起用, 不过还是想讲讲解决一些问题的思路.</p>
<h2 id="遇到问题" class="headerLink">
    <a href="#%e9%81%87%e5%88%b0%e9%97%ae%e9%a2%98" class="header-mark"></a>遇到问题</h2><p>最近开始尝试使用 <code>Xah Fly Keys</code>, Emacs 的默认键位虽然很好记, 但是还是有点费手, 一只手价格还是不菲的 (大雾)</p>
<p>然后当我配置完 <code>Xah Fly Keys</code> 的基础部分并准备用 <code>Magit</code> 做一个提交的时候, 我发现 <code>Xah Fly Keys</code> 的键位完美地把 <code>Magit</code> 的键位整个覆盖了.</p>
<h2 id="解决方案" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88" class="header-mark"></a>解决方案</h2><p><strong>(包含了完全解决不了和有副作用的方案)</strong></p>
<h3 id="加钩子函数" class="headerLink">
    <a href="#%e5%8a%a0%e9%92%a9%e5%ad%90%e5%87%bd%e6%95%b0" class="header-mark"></a>加钩子函数</h3><p>嗯, 看起来确实管用, 对吧. 我具体是这样写的:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;magit-mode-hook</span> <span class="nf">#&#39;</span><span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span> <span class="p">(</span><span class="nv">xah-fly-keys</span> <span class="mi">-1</span><span class="p">)))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是当你开心地退出 <code>Magit</code> 之后, 你会开心地发现, <code>Xah Fly Keys</code> <del>不爱你了</del>没有被重新开启, 于是就有了下面一种解决方案&hellip;</p>
<h3 id="加钩子函数--mini-buffer-钩子函数" class="headerLink">
    <a href="#%e5%8a%a0%e9%92%a9%e5%ad%90%e5%87%bd%e6%95%b0--mini-buffer-%e9%92%a9%e5%ad%90%e5%87%bd%e6%95%b0" class="header-mark"></a>加钩子函数 + Mini-buffer 钩子函数</h3><p>看起来完全没问题了吧? 不, 我把 Mini-buffer 的钩子函数加在了 <code>Magit</code> 的后面:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;magit-mode-hook</span> <span class="nf">#&#39;</span><span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span> <span class="p">(</span><span class="nv">xah-fly-keys</span> <span class="mi">-1</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;minibuffer-inactive-hook</span> <span class="nf">#&#39;</span><span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span> <span class="p">(</span><span class="nv">xah-fly-keys</span> <span class="mi">1</span><span class="p">)))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>(我也不知道怎么写出这么一段的)</p>
<p>总之这个钩子会在每次使用 Mini-buffer 时触发, 但还是想得太天真了, 毫无用处, 因为这个钩子按理来说就不应该加在这儿&hellip;</p>
<h3 id="加钩子函数--改-magit-函数" class="headerLink">
    <a href="#%e5%8a%a0%e9%92%a9%e5%ad%90%e5%87%bd%e6%95%b0--%e6%94%b9-magit-%e5%87%bd%e6%95%b0" class="header-mark"></a>加钩子函数 + 改 Magit 函数</h3><p>这时候就应该换一个方面想解决方案了&hellip;</p>
<p>然后我发现我 <code>Magit</code> 的退出函数是绑定到我自己的自定义函数上面的 (你以为是要覆盖 <code>Magit</code> 的自带函数?)</p>
<p>函数内容如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">kiteab/kill-magit</span> <span class="p">(</span><span class="kp">&amp;optional</span> <span class="nv">dir</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Kill the buffer about Magit&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">magit-mode-bury-buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nf">null</span> <span class="p">(</span><span class="nv">magit-mode-get-buffers</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">buffer</span> <span class="p">(</span><span class="nv">magit-mode-get-buffers</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">kill-buffer</span> <span class="nv">buffer</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">define-key</span> <span class="nv">magit-mode-map</span> <span class="s">&#34;q&#34;</span> <span class="nf">#&#39;</span><span class="nv">kiteab/kill-magit</span><span class="p">)</span> <span class="c1">;; Use a sharp quote when quoting functions</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>意思是关闭所有 <code>Magit</code> 的相关 buffer.</p>
<p>那么直接在关闭后重新打开 <code>Xah Fly Keys</code> 不就好了?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">kiteab/kill-magit</span> <span class="p">(</span><span class="kp">&amp;optional</span> <span class="nv">dir</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Kill the buffer about Magit&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">magit-mode-bury-buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nf">null</span> <span class="p">(</span><span class="nv">magit-mode-get-buffers</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">buffer</span> <span class="p">(</span><span class="nv">magit-mode-get-buffers</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nf">kill-buffer</span> <span class="nv">buffer</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">xah-fly-keys</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">define-key</span> <span class="nv">magit-mode-map</span> <span class="s">&#34;q&#34;</span> <span class="nf">#&#39;</span><span class="nv">kiteab/kill-magit</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决!</p>]]></description>
</item><item>
    <title>Arch 上的备份还原</title>
    <link>https://blog.kiteab.me/arch-backup-forward/</link>
    <pubDate>Fri, 21 Aug 2020 18:09:40 &#43;0800</pubDate><author>
        <name>K1t3AB</name>
    </author><guid>https://blog.kiteab.me/arch-backup-forward/</guid>
    <description><![CDATA[<p>入坑Arch，主要方便自己查询和刚入坑经常玩挂的朋友，其他发行版应该大同小异</p>
<p>Linux上主要的备份方式 我知道的有 dd 和 tar</p>
<p>相比来说 tar打包显得比较灵活，可以用于本机备份恢复，也可以恢复到其他计算机，打包的目录可以完全按自己需要。这里主要介绍tar打包以及本机的恢复。</p>
<p>tar打包 可以只打包不压缩，速度会比较快，但是你可能会面对一个 好几十G的系统备份包，并不推荐。</p>
<p>压缩 可以用gzip或者Bzip2 （好像还有其他的，不熟悉，就不做介绍了） 二者相比，gzip速度相对较快，但压缩比率比Bzip2略低。</p>
<p>我这里并不用这两个软件打包，因为两个都是单线程，打包速度会非常慢。。。曾经用bzip2打包等到天荒地老都没好。。。</p>
<p>那么重头戏来了！ 偶然的机会知道了一个叫pigz的多线程压缩软件，采用与gzip相同的压缩方式，默认以逻辑CPU的个数的线程进行压缩，具体线程还可以自定义，速度飞快，详细可以百度 pigz。</p>
<p>那么 tar能不能调用pigz进行压缩呢？ 答案是肯定的！</p>
<p>看一下tar的man手册</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-I, --use-compress-program=COMMAND
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Filter data through COMMAND. It must accept the -d option,
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">for decompression. The argument can contain command line
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Options.
</span></span></code></pre></td></tr></table>
</div>
</div><p>发现tar是可以指定其他压缩程序进行压缩的。</p>
<p>于是直接 <code>sudo pacman -S pigz</code> 安装（arch官方源就有）下面就可以开始打包了！</p>
<p>进入根目录 然后执行：</p>
<p><code>sudo tar --use-compress-program=pigz -cvpf arch-backup.tgz --exclude=/proc --exclude=/lost+found --exclude=/arch-backup.tgz --exclude=/mnt --exclude=/sys --exclude=/run/media /</code></p>
<p>简单介绍一下命令，&ndash;use-compress-program=pigz 是用pigz压缩，arch-backup.tgz是打包之后的文件名，&ndash;exclude=/xxx是打包时排除的目录，这里简单的排除了一些不需要的目录，具体排除的内容可以根据自己的发行版和需要设定，&ndash;exclude=/arch-backup.tgz 是排除根目录下的自身，因为我是在根目录下进行的操作，如果不排除自身的话，打包可能会进入一个死循环。。。你可能会打出一个巨型包。</p>
<p>这样就开始进行压缩打包了</p>
<p>用htop 可以看到 CPU满载，大概3-5分钟左右完成，比起单线程10%多的占用 速度快了不知道多少倍！</p>
<p>完成候可以看到 28G左右的分区 打包完 是一个15G的压缩包，个头还是很大。。。也算可以接受。。不知道有没有其他办法能够再小点</p>
<p>打包完成后，你可能会看到一条错误信息，具体原因小白不懂，不过并没有什么影响。然后将备份的包放到一个你觉得安全的地方。</p>
<p>至此，所有备份工作都已经完成，系统挂了可以用下面的方法恢复</p>
<hr>
<p>首先需要准备一个能够引导的liveCD的U盘</p>
<p>进入liveCD之后 先用wifi-menu联网，因为liveCD上没有pigz，如果不想解压恢复的时候用半年的话就联网装上再解压吧</p>
<p>Ping一下百度看看是否联网成功，之后简单配置下源 就可以安装pigz了</p>
<p>sudo nano /etc/pacman.d/mirrorlist 配置源</p>
<p>安装pigz</p>
<p>要用到的pigz准备好之后就可以挂载磁盘 进行恢复了。</p>
<p>lsblk简单看下各个分区情况</p>
<p>我这里sdc1是boot分区 sdc2是/分区 sdb3是保存备份的分区</p>
<p>直接新建了一个目录挂载 sdb3</p>
<p>mkdir /f</p>
<p>mount /dev/sdb3 /f</p>
<p>然后挂载 目标linux根分区到/mnt目录， 我的arch只分了 boot和/分区，并且备份的时候 忘记排除boot目录了，所以这里索性都挂载上干掉。挂载之后如图</p>
<p>现在就可以干掉已经损坏的系统了</p>
<p><code>rm -rf /mnt/*</code></p>
<p>命令很危险，一定要看清楚，想清楚了之后再执行，我真是怕小手一抖就把不想干掉的分区干掉了</p>
<p>这里zsh提示是否确定干掉/mnt上的所有文件 直接y
boot目录因为是分区挂载点提示设备忙，这个目录并没有被删掉，不过ls一下可以看见/mnt下只剩boot目录，/mnt/boot下所有的引导文件也都没有了</p>
<p>万事俱备，下面进行解压恢复 还是使用pigz进行多线程解压</p>
<p>#tar &ndash;use-compress-program=pigz -xvpf /f/sysbackup/arch-backup-20160331.tgz -C /mnt</p>
<p>这里自行把备份路径替换掉。接下来就是解压过程如图：</p>
<p>用不了多久 也就2-3分钟 解压完成！(ssd)</p>
<p>ls看看 干掉的文件是不是都回来了呢</p>
<p>OK，問題ない！</p>
<p>到这里，恢复工作已经接近尾声，还记得备份的时候排除掉的目录么，重建排除的目录</p>
<p>然后直接reboot重启</p>
<p>前面干掉了 / 分区所有文件真的 大丈夫？</p>
<p>重启之后 可爱的grub菜单出现了！
因为我之前把boot一起干掉了，所以看到这里就表面恢复成功了！</p>
<p>所有备份恢复工作全部完成！</p>
<p>总结起来，主要是利用了 pigz 的多线程提高 压缩解压的效率，比普通的gzip或者bzip2快很多！缺点还是比较明显，就是备份的包个头略大，不知道怎么能够再小点</p>
<p>而且我只涉及了本机恢复，如果恢复到其他机子，还涉及到fstab修改之类的一些收尾工作。</p>
<p>抛砖引玉，如果有其他好的方法 欢迎交流！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">作者：baby_blue_
</span></span><span class="line"><span class="cl">链接：https://www.jianshu.com/p/b03a51c682a5
</span></span><span class="line"><span class="cl">来源：简书
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>记一次系统出错及备份过程</title>
    <link>https://blog.kiteab.me/arch-backup/</link>
    <pubDate>Fri, 21 Aug 2020 17:41:24 &#43;0800</pubDate><author>
        <name>K1t3AB</name>
    </author><guid>https://blog.kiteab.me/arch-backup/</guid>
    <description><![CDATA[<p>不知道哪天把 Arch 玩炸了写的</p>
<h2 id="出现错误" class="headerLink">
    <a href="#%e5%87%ba%e7%8e%b0%e9%94%99%e8%af%af" class="header-mark"></a>出现错误</h2><p>一个愉快的下午, 我正在玩游戏, 然后我的 Linux 愉快地内存溢出了, 然后内核挺正常地 Crash 掉了, 然后当我重启之后, 我发现我的 Arch Linux 进入了 rootfs 恢复模式, 我当时的心情就好像以前有一次在实机上执行了 <code>sudo rm -rf /*</code> 一样, 一句 fuck 就要脱口而出</p>
<h2 id="解决错误" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e9%94%99%e8%af%af" class="header-mark"></a>解决错误</h2><p>还是同一个不怎么愉快的下午, 我看到屏幕上显示的错误信息貌似是 <code>ERROR: Can't read /dev/sda2 filesystem, use fsck may can fix it. Good Luck!</code>, 意思差不多就是: 不能读取 /dev/sda2 (我的根目录) 的文件系统, 用 <code>fsck</code> 这个工具可能可以修复这个错误, 祝 你 好 运</p>
<p>那么试试执行 <code>fsck</code> ?</p>
<p>(PS: <code>fsck</code> 是一个检查与修复 Linux 文件系统的工具)</p>
<p>然后出现信息让我输入 y/n 来确定是否修复一个块, 这样的信息连着显示了三四个 tty 的整屏……</p>
<p>修复完成, 重启电脑, 修复完成!</p>
<h2 id="备份系统" class="headerLink">
    <a href="#%e5%a4%87%e4%bb%bd%e7%b3%bb%e7%bb%9f" class="header-mark"></a>备份系统</h2><p>经过这么一次事件, 心里还是凉的, 准备整个双内核, 但是麻烦, 于是准备开启定时备份的策略</p>
<p>在网上搜到了<a href="https://www.jianshu.com/p/b03a51c682a5" target="_blank" rel="noopener noreffer">这么一篇文章</a>, 正好可以满足我的需求, Done!</p>
<h2 id="最后" class="headerLink">
    <a href="#%e6%9c%80%e5%90%8e" class="header-mark"></a>最后</h2><p>大家真的一定要定时备份系统, 这样即使遇到故障, 也只需要插上备份盘然后恢复就好了, 指不定哪天你的硬盘就坏了呢?</p>]]></description>
</item><item>
    <title>Arch Linux 常用软件</title>
    <link>https://blog.kiteab.me/arch-software/</link>
    <pubDate>Fri, 10 Jul 2020 17:36:21 &#43;0800</pubDate><author>
        <name>K1t3AB</name>
    </author><guid>https://blog.kiteab.me/arch-software/</guid>
    <description><![CDATA[<p>2020 的我的常用软件</p>
<h2 id="编辑篇" class="headerLink">
    <a href="#%e7%bc%96%e8%be%91%e7%af%87" class="header-mark"></a>编辑篇</h2><h3 id="neovim" class="headerLink">
    <a href="#neovim" class="header-mark"></a>NeoVim</h3><p>对于我来说，编辑器 <a href="https://neovim.io" target="_blank" rel="noopener noreffer">NeoVim</a>，帮助乌干达儿童，没得选 (滑稽)</p>
<p>说回正题，NeoVim 是一个代码兼文本编辑器，它是 Vim 的衍生版，不过 NeoVim 的启动速度更快，自定义性更高，还有 NeoVim 独占的插件</p>
<p>并且，最重要的是，这个软件在<strong>命令行</strong>下运行，也就是说，我想做一个编辑，只需要输一行命令，也不用打开图形化界面，直接就能开始编辑！</p>
<p>当然，使不使用 NeoVim 是你自己的自由，主要看你的工作环境是不是常在终端下，以及你能否习惯 Vim 家族的逻辑方式 (NORMAL, INSERT, VISUAL 模式等)，如果能，那么你可以尝试一下 NeoVim！</p>
<p>NeoVim 和 Vim 都拥有自己的图形化界面，也就是 GTK/QT 版，但我个人认为特意打开图形化界面，除非 NeoVim 能做到像 Emacs 那样，进入就不用再切出来，否则将会降低工作效率！</p>
<h3 id="gedit" class="headerLink">
    <a href="#gedit" class="header-mark"></a>Gedit</h3><p>gedit 是一款图形化的文本编辑器，是 GNOME 默认的文本编辑器，不过我很少用它。类似产品还有 KDE 自带的 Kate，不用的原因是过于臃肿</p>
<p></p>
<p>小声 BB: 其实用它只是因为在 MC 里输入不了中文用它输入在粘贴进去而已 XD</p>
<h2 id="监视类" class="headerLink">
    <a href="#%e7%9b%91%e8%a7%86%e7%b1%bb" class="header-mark"></a>监视类</h2><h3 id="htop" class="headerLink">
    <a href="#htop" class="header-mark"></a>Htop</h3><p>Info: 就不说 Top 了，那玩意现在基本没人用了</p>
<p>Htop 是一款全能的系统监视软件，虽然有点丑，但是监视得还是比较全面了，也能做些杀程操作啥的</p>
<p></p>
<h3 id="bashtop" class="headerLink">
    <a href="#bashtop" class="header-mark"></a>BashTop</h3><p>BashTop 是一款<strong>非常好看且实用</strong>的监控软件，它不仅能监视 CPU、内存、硬盘等占用情况，还能监控单个进程的运行情况、占用等！</p>
<p></p>
<h2 id="截图类" class="headerLink">
    <a href="#%e6%88%aa%e5%9b%be%e7%b1%bb" class="header-mark"></a>截图类</h2><h3 id="flameshot" class="headerLink">
    <a href="#flameshot" class="header-mark"></a>Flameshot</h3><p>Flameshot，中文名火焰截图，是一款在 Linux 上使用的截屏工具，在截图后也可以进行编辑操作，可以说是 Linux 版的 Snipaste！</p>
<p></p>
<h3 id="scrot" class="headerLink">
    <a href="#scrot" class="header-mark"></a>Scrot</h3><p>Scrot 是一个命令行独占的万能截图工具，如果不在后面传参的话默认截取全屏，文件格式默认为 png，可以通过 <code>scrot -h</code> 或 <code>man scrot</code> 获取帮助</p>
<p>(<a href="#flameshot" rel="">上面 Flameshot 的截图</a>就是 Scrot 截的)</p>
<h2 id="其它类" class="headerLink">
    <a href="#%e5%85%b6%e5%ae%83%e7%b1%bb" class="header-mark"></a>其它类</h2><h3 id="google-chrome" class="headerLink">
    <a href="#google-chrome" class="header-mark"></a>Google Chrome</h3><p>Chrome 浏览器，必备，就是内存占用有点高</p>
<p></p>
<h3 id="feh" class="headerLink">
    <a href="#feh" class="header-mark"></a>Feh</h3><p>Feh 是一个图片查看软件，当然，也可以用它来指定图片切换壁纸，操作为仅命令行</p>
<p></p>
<h3 id="mpv" class="headerLink">
    <a href="#mpv" class="header-mark"></a>mpv</h3><p>mpv 是一个音视频播放软件，当然，也可以把它调教好做图片查看器，但是不推荐，操作命令行独占</p>
<p></p>
<h3 id="lazygit" class="headerLink">
    <a href="#lazygit" class="header-mark"></a>Lazygit</h3><p>Lazygit 是一个 Git 的懒人版本，有在终端的 &ldquo;UI&rdquo;，支持自定义快捷键</p>
<p></p>
<hr>
<p>以上便是我所有日常使用的软件，<a href="https://dwm.suckless.org" target="_blank" rel="noopener noreffer">dwm</a> 与 <a href="https://st.suckless.org" target="_blank" rel="noopener noreffer">st</a> 忽略不计</p>
<p>你可以在<a href="https://github.com/KiteAB" target="_blank" rel="noopener noreffer">我的 GitHub</a> 上找到以上大多数软件的配置</p>
<p>我的 GitHub 地址可以在本站的右上角找到</p>]]></description>
</item><item>
    <title>Colemak 学习笔记</title>
    <link>https://blog.kiteab.me/colemak/</link>
    <pubDate>Thu, 09 Jul 2020 22:27:09 &#43;0800</pubDate><author>
        <name>K1t3AB</name>
    </author><guid>https://blog.kiteab.me/colemak/</guid>
    <description><![CDATA[<p>这篇文章介绍了我是怎么从 QWERTY 转到 Colemak 的</p>
<h2 id="最开始的时候" class="headerLink">
    <a href="#%e6%9c%80%e5%bc%80%e5%a7%8b%e7%9a%84%e6%97%b6%e5%80%99" class="header-mark"></a>最开始的时候</h2><p>第一次听说 Colemak 是从 <a href="https://space.bilibili.com/13081489" target="_blank" rel="noopener noreffer">CW</a> 的视频里，虽然在此之前已经听说过了世界上有其他的键盘布局，但还是没想到一个非 QWERTY 的键盘布局能是这样的：</p>
<p></p>
<p>然后我就想尝试一下通过 <a href="https://www.kde.org" target="_blank" rel="noopener noreffer">KDE</a> 家的 ktouch 来练习并日常使用 Colemak，那时候我用的是 KDE，但是 CW 视频里所讲的切换键盘布局方法是用 xmodmap，结果我的 KDE 直接就崩掉了 /笑哭</p>
<p>所以我就抛弃了很长一段时间的 Colemak</p>
<h2 id="一次-小转折" class="headerLink">
    <a href="#%e4%b8%80%e6%ac%a1-%e5%b0%8f%e8%bd%ac%e6%8a%98" class="header-mark"></a>一次 &ldquo;小转折&rdquo;</h2><p>第二次是在一个很很很很很很很很很很很无聊的下午，我实在没事干</p>
<p>突然，我就想起了 Colemak 这回事</p>
<p>那时候我在用 <a href="https://www.i3wm.org" target="_blank" rel="noopener noreffer">i3wm</a>，但是因为有 fcitx 这个输入法框架，它会很频繁的执行 <code>setxkbmap us</code>，也就是切换成 QWERTY 的指令，我当时不知道解决这个问题，又不能抛弃 fcitx，所以就再一次放弃了。这个问题直到我用 <a href="https://dwm.suckless.org" target="_blank" rel="noopener noreffer">dwm</a> 初期的时候都没解决</p>
<h2 id="终于正式入坑" class="headerLink">
    <a href="#%e7%bb%88%e4%ba%8e%e6%ad%a3%e5%bc%8f%e5%85%a5%e5%9d%91" class="header-mark"></a>终于正式入坑</h2><p>直到大概 6.23 的时候，这个问题才被我解解决</p>
<h3 id="解决方案" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88" class="header-mark"></a>解决方案：</h3><ul>
<li><i class="far fa-square fa-fw"></i> 确保安装了 <code>fcitx-configtool</code> 这个包</li>
<li><i class="far fa-square fa-fw"></i> 右击托盘中的 <code>fcitx</code> 图标，点击 <code>Configure</code> (中文的本地化显示的应该是 <code>配置</code> )</li>
<li><i class="far fa-square fa-fw"></i> 在 <code>Input Method</code> 菜单中选中 <code>Keyboard - English (US)</code> 一项，点击左下角的 <code>-</code> 删除该输入方法</li>
<li><i class="far fa-square fa-fw"></i> 接着点击 <code>+</code> 新建一个输入方法，取消勾选 <code>Only Show Current Language</code>，然后找到 <code>Keyboard - English (US) - English (Colemak)</code>，点击 <code>OK</code> 按钮添加当前输入方法</li>
<li><i class="far fa-square fa-fw"></i> 选中 Colemak 输入方法并点击下面的 <code>^</code> 按键将 Colemak 移至顶部</li>
<li><i class="far fa-square fa-fw"></i> 如果还需中文输入 Colemak，请选中中文输入法的输入方法，点击右下角的齿轮，找到 Colemak 选中并点击 <code>OK</code> 即可</li>
</ul>
<p>这就是我所找到的 fcitx 用户的 Colemak 解决方案</p>
<p>解决问题后，我便着手开始学习 Colemak，现在已经到了比较熟练的境界了</p>
<h2 id="其他" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96" class="header-mark"></a>其他</h2><h3 id="一些建议" class="headerLink">
    <a href="#%e4%b8%80%e4%ba%9b%e5%bb%ba%e8%ae%ae" class="header-mark"></a>一些建议</h3><ul>
<li><i class="far fa-square fa-fw"></i> 不要使用第三方练习软件！！！直接换上实践就是最好的学习方法，只要两周左右即可上手</li>
<li><i class="far fa-square fa-fw"></i> 不要中途放弃，这样不仅会使你不熟练 Colemak，而且在前段时间学习 Colemak 时已经不太熟练 QWERTY，简单来说，就是两个键盘布局的输入速度都会下降！</li>
</ul>
<h3 id="疑惑解答" class="headerLink">
    <a href="#%e7%96%91%e6%83%91%e8%a7%a3%e7%ad%94" class="header-mark"></a>疑惑解答</h3><ul>
<li>
<p>Q: 学习新的键盘布局有什么好处？</p>
</li>
<li>
<p>A: <strong>最坏的情况也就是输入速度甚至比 QWERTY 稍慢，但我认为换来了输入手感，还是值得的</strong></p>
</li>
<li>
<p>Q: 我使用了 Vim/Emacs, Lazygit 等终端工具，切换键盘布局会使快捷键输入变得困难许多，怎么办？</p>
</li>
<li>
<p>A：<strong>可以用别人的 Colemak 配置文件，也可以自己改配置</strong></p>
</li>
<li>
<p>Q：我在手机上使用的输入法不能改键盘布局，而且我使用的是二十六键，怎么办？</p>
</li>
<li>
<p>A: <strong>建议不仅不要减少手机输入法使用频率，还要让手机输入与电脑输入的量平衡，这样等练成了后你就有了一手 &ldquo;自由切换EZ&rdquo; 的技能，用别人电脑并已熟练 Colemak 时也不会大幅度降低 QWERTY 输入速度</strong></p>
</li>
<li>
<p>Q: 别人或者家人要用我的电脑怎么办？</p>
</li>
<li>
<p>A：<strong>给他切回 QWERTY 用呗，等用完了再换回 Colemak 如果经常有切换键盘布局的需要的话还是不要尝试 Colemak 了 (除非要用你电脑的是个熊孩子，这种直接拒绝就好 2333)</strong></p>
</li>
</ul>
<hr>
<p>以上便是我用 Colemak 的所有体验，并且我希望你能在看完这篇博文后，不要一心想着换 Colemak，得先思考这个键盘布局适不适合你，然后再做决定，不然你就会体会到类似于<a href="#%e4%b8%80%e4%ba%9b%e5%bb%ba%e8%ae%ae" rel="">一些建议</a>中的第二条一样的痛苦  233</p>]]></description>
</item><item>
    <title>Hello World</title>
    <link>https://blog.kiteab.me/hello-world/</link>
    <pubDate>Sun, 14 Jun 2020 16:07:10 &#43;0800</pubDate><author>
        <name>K1t3AB</name>
    </author><guid>https://blog.kiteab.me/hello-world/</guid>
    <description><![CDATA[<h3 id="这是我的第一篇博文" class="headerLink">
    <a href="#%e8%bf%99%e6%98%af%e6%88%91%e7%9a%84%e7%ac%ac%e4%b8%80%e7%af%87%e5%8d%9a%e6%96%87" class="header-mark"></a>这是我的第一篇博文</h3><h4 id="本博客使用-hugo-引擎进行搭建" class="headerLink">
    <a href="#%e6%9c%ac%e5%8d%9a%e5%ae%a2%e4%bd%bf%e7%94%a8-hugo-%e5%bc%95%e6%93%8e%e8%bf%9b%e8%a1%8c%e6%90%ad%e5%bb%ba" class="header-mark"></a>本博客使用 <strong>Hugo</strong> 引擎进行搭建</h4><h2 id="test-part" class="headerLink">
    <a href="#test-part" class="header-mark"></a>Test Part</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Hello, World!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Catmario TAS 教程</title>
    <link>https://blog.kiteab.me/catmario-tas/</link>
    <pubDate>Sun, 07 Apr 2019 20:12:26 &#43;0000</pubDate><author>
        <name>K1t3AB</name>
    </author><guid>https://blog.kiteab.me/catmario-tas/</guid>
    <description><![CDATA[<p>今天为大家带来一些Catmario TAS（或者说叫NAS）的教程，希望大家也能使用TAS的方法打出让人惊讶的视频与记录！</p>
<h3 id="本文章转自快乐mario的百度贴吧账号" class="headerLink">
    <a href="#%e6%9c%ac%e6%96%87%e7%ab%a0%e8%bd%ac%e8%87%aa%e5%bf%ab%e4%b9%90mario%e7%9a%84%e7%99%be%e5%ba%a6%e8%b4%b4%e5%90%a7%e8%b4%a6%e5%8f%b7" class="header-mark"></a>本文章转自@快乐mario的百度贴吧账号</h3><hr>
<p>首先，打一个TAS至少要具备以下几点要求</p>
<ul>
<li>有充足的时间</li>
<li>有对电脑操作的基本技巧</li>
<li>有对TAS是什么的认识</li>
<li>有对Catmario的理解与热爱</li>
<li>有一定耐心与恒心</li>
<li>有一个XP系统
具备这一些，打一个TAS就是很简单的事情了。</li>
</ul>
<p><strong>【注意】这里的几点都是很重要的！最重要的是必须有 [XP] 系统！</strong></p>
<p>首先，我们要下载一个工具，名字叫Hourglass。这里提供给大家的是Hourglass-r71的汉化版本，我们就用这个来做Catmario的TAS。我们还需要Catmario的游戏文件。请点击下面的地址下载Hourglass模拟器和Catmario游戏，解压缩到合适的地方。
<a href="https://pan.baidu.com/share/link?shareid=3242248356&amp;amp;uk=3120686554" target="_blank" rel="noopener noreffer">点我下载模拟器以及游戏文件</a></p>
<p>解压缩后可以看到TAS的文件夹，打开后里面有两个文件夹，一个是Catmario，一个是Hourglass。我们要打开的是Hourglass文件夹里的“模拟器”文件。

</p>
<p>打开以后看到这样的画面，按图示操作
</p>
<p>然后Hourglass会自动在Hourglass文件夹内创造同名的wtf录像文件，这个录像文件是纪录按键用的，也就是等下你打TAS时每一帧记录按键的文件。</p>
<p>下面以【最速】TAS为例，给大家介绍TAS教程，首先要进行一系列的设置：
选择好“游戏可执行程序”为我们的Catmario游戏以后，点击【运行库】→【区码模拟】→【强制日文区码】，这样可以解决TAS黑屏的问题。</p>
<p>点击【运行库】→【信息同步模式】→【同步】，这样可以解决一些突然退出的问题，但是有时退出也是难免的。
在【每秒帧数】栏中，把【60】帧改为【30】帧，这样可以防止延迟帧（Lag）的出现。
在【系统时间】栏中，把【6000】改为【0】，这样可以方便系统时间的校对。
点击【输入】→【配置快捷键】，找到并点击【单帧步进（第2个）】，查看是否为Space，如果不是Space，点击【设定&hellip;】然后按下【空格键】。</p>
<p>这样差不多就可以了，但是如果你在游戏途中（倒着的飞鱼出现时）崩溃（Crash）了，请再选择【声音】→【禁止DirectSound创建】，这样可以解决Crash的问题。（一般情况下不要选择，不然会没有声音）
接下来就是开始录制TAS录像的时候了，先来试验一下，点击【运行并录制新录像】，你会看到Catmario游戏窗口跳出，像往常一样先玩一会吧！</p>
<p>【注意】有时候腾讯等软件会误报注入信息，请点击更多操作→允许此程序所有操作，如果不注入按键怎么玩游戏啊，这种低级的误报真是奇怪！</p>
<p>玩的差不多了，点击【停止运行】，然后点击【运行并播放现有录像】，你会发现，你刚刚的所有操作都像是被录下来了一样又回放了一遍！而且是在真正的游戏窗口中回放的哦，这就是因为模拟器把你刚刚所有的按键全部记录到【录像文件】里面去了，而且时间非常的精确，不会有差错哦~</p>
<p><strong>注意，每次打开Hourglass都要重新设定上面的内容</strong></p>
<p>其实这个软件何止只有这么点功能，他还有很多强大的功能，我们来体验一下。</p>
<p>按【运行并录制新录像】重新录制，一般他会提示是否重复录制[record over]该录像？意思就是你现在重新录制的话，会把之前的按键操作覆盖掉，如果你不希望被覆盖掉，就点击取消，然后给录像文件换一个名字（本来是&hellip;\しょぼんのアクション.wtf，你可以换成速通.wtf或者其他）然后运行并录制新录像。</p>
<p>这时，你可以在任何时候，点击模拟器右边的“暂停”，你会发现，游戏居然停住了！然后，你可以敲击一下空格键，你又会发现，整个游戏只动了一点点！这是因为模拟器把游戏一秒钟的操作分配到了30帧，所以你就可以做很精确的操作了！</p>
<p>比如这样~
</p>
<p>比如这样~
</p>
<p>厉害吧！还有更厉害的呢，你可以在任何时候按 Shift + 1 来保存一个存档，然后当你玩着玩着突然死了以后，按下 1 ，你会发现：游戏又从你保存的地方开始了！</p>
<p><strong>【注意】一共有20个存档，0-9 和 F1-F10 ，存档要加Shift，读档不用，9的存档对应F10的读档</strong></p>
<p>【温馨提示】如果你一个录像要录制很多天的话，你可以在任何时候，按【运行并播放现有录像】，按【shift+数字】存档，再点击Hourglass窗口的【读写权限】，然后按【数字】读档就可以继续录制！</p>
<p>前面展示的就是Hourglass的基本功能：按键记录、加速（快进）与减速、暂停、即时存档与读档（S\L 大法）而这些基本是普通的游戏不能做到的。</p>
<p>接下来说明一下按键文件转AVI录像的功能，选择【AVI】→【捕捉视频+音频】，然后点击【运行并播放现有录像】，会提示保存AVI录像文件在哪里，选择好以后就开始播放录像，在合适的时候停止运行，你会发现AVI录像文件已经保存好了，帧率都不变，非常高清！但是文件大小比较大，推荐用岛国的软件 TMPGEnc 4.0 压缩，也可以用Winrar或者2345好压打成压缩包~</p>
<p>前面已经把Hourglass大部分基础的内容讲完了，但是实际上这款模拟器还有一个强大又是必备的功能：内存搜索与监视！内存搜索就不教大家了，这里我把我亲自搜索整理出来的内存值分享给大家。首先点击Hourglass的【工具】→【内存监视】，跳出这样一个框框
</p>
<p>在这个框框中按【添加】
</p>
<p>打开的窗口中按上图输入地址、注释，选择数据大小后确定
用同样的方法添加以下内容
0060331C 横坐标
00603320 纵坐标
00603330 横速度（-800~800）
00603334 纵速度（-1600~1600）
00603336 上升判定1，下降判定
000603364 踩地判定1，跳起判定0</p>
<p>其实真正打速通的话，我们要用的仅仅是第3个和第4个，有时会用到第6个！添加好这6个内存值后，点击文件→保存，这样下次用模拟器就可以直接打开！</p>
<p>然后不要关这个内存监视，你再去录一下看看~是不是感觉非常高级！</p>
<p>好，有了这两个，我们就开始速通录像的录制吧！
</p>
<p>首先当然是调整好帧数和系统时间及其他设置，然后先点击【暂停】，按下【运行并录制新录像】后马上按住Enter！如果你第8帧就进入了黑屏画面，说明一开始你的速度是最快的！
</p>
<p>这时候你就要按住右，然后用空格键步进，确保你开始你就在加速！
</p>
<p>可以看到画面刚出现，你的横速度已经达到了80，这就是TAS方法之一：黑屏加速法！</p>
<p>TAS方法之二：边缘起跳与边缘落脚法如果我们想要让TAS变得更快，那么我们就要让它多加速一会，所以当然要加速到最边缘再起跳！值得一提的是，Catmario的【起跳判定】特别坑，它是计算你z按键的次数，如果是双数的话就可以起跳，如果是单数的话就不能起跳- -

（前一帧已经按下z，单数不起跳）</p>
<p>
（又按了一帧z，双数起跳）</p>
<p>边缘落脚：即使你没有真正踩到地板，由于边缘判定的bug，也会上去！</p>
<p>
（啊我要掉下去了~~~）</p>
<p>
（哇，我竟然跳上来了喵！）</p>
<p>TAS方法之三：二段跳、斜角穿墙、纵向穿墙</p>
<p>这应该是Catmario TAS 中最吸引人的部分了！让人无法理解的是，穿墙的判定条件真是奇怪得让人无语：不需要速度快（纵向穿墙），也不需要准确的按键，甚至你根本就不知道哪一个点可以卡墙！！所以，卡墙与穿墙真的是靠运气的事情，下面给大家截取几个样本图：</p>
<p>① 横速度 -709，猫与墙距离4像素，斜角穿墙

</p>
<p>② 横速度 734，猫与墙距离3像素，二段跳

</p>
<p>③ 横速度 717，猫与墙距离4像素，斜角穿墙

</p>
<p>④ 横速度 761，猫与墙距离6像素，斜角穿（隐形砖）墙

</p>
<p>⑤ 横速度 717，猫与墙距离4像素，二段跳

</p>
<p>⑥ 横速度 634，猫与墙距离4像素，二段跳

</p>
<p>⑦ 横速度-534，纵速度800，猫与墙距离4像素，二段跳

</p>
<p>⑧ 横速度800，纵速度633，猫与墙距离4像素，斜角穿墙

</p>
<p>（由于博客再放例子会原地爆炸，所以直接放总结图了）
</p>
<p>二段跳和斜角穿墙一般要求与墙距离4像素，横速度的绝对值≥520
纵向穿墙要求猫的手在墙中，横速度在0左右即可。
如果各位录制视频时有更大的发现，请私信快乐mario</p>
<p>TEHH_083：补充一点,纵向穿墙要求速度不能为0，否则会被墙挤出，若要穿右边的墙，速度必须是负的，也不能太大，否则会脱离墙内状态。左边的反之
总而言之有半个身子左右进入墙内就可以了</p>
<p>TAS知识【加速规则】
{横向速度加速规则}
横向加速分为两种，落地加速和（跳起）空中加速</p>
<p>落地加速：0~659 速度时，按方向键1帧 速度+40，如659→699
&mdash;&mdash;&mdash; 660~700→705
&mdash;&mdash;&mdash; 705~793 速度时，按方向键1帧，速度+4，如793→797
&mdash;&mdash;&mdash; 797→800</p>
<p>空中加速：0~500 速度是，按方向键1帧，速度+40，如500→540,速度≥501不再加速。</p>
<p>{横向速度减速规则}
横向减速分为三种，落地空减速，空中减速，落地回撤减速</p>
<p>落地减速（什么也不按）：40~800 速度时，减速-60/帧，可以减速到变方向
&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; 0~20 速度是，一帧减速到0</p>
<p>落地回撤减速（落地按反方向键）：141~800 减速-100/帧
&mdash;&mdash;&mdash;&mdash;&ndash; 0~140 减速-40/帧，变方向以后就视为加速</p>
<p>空中减速（空中按反方向键）：141~800 减速-66/帧
&mdash;&mdash;&mdash;&mdash;&ndash; 0~140 减速-40/帧，变方向以后就视为加速</p>
<p>很明显，撞墙减速是最最最快的！800→0也是很简单的</p>
<p>小结：这里我们看到当速度很快时落地回撤加速是最快的，相当于落地减速+反方向落地加速</p>
<p>TAS知识【加速规则】
{纵向速度加速规则}
g=100/帧，大家懂了吧~
纵向速度的取值范围为-1600~1600，默认正为下
普通跳起，第1帧纵速度-1100，然后用g减速直到落地，比如第二帧纵速度就是-1000
普通跳起（小跳）的第三帧为判定帧，如果这帧按下了跳，不管第三帧纵速度如何，第四帧纵速度自动改为……
第三帧横速度为 0~199，第四帧纵速度改为-1200
第三帧横速度为 200~599，第四帧纵速度改为-1300
第四帧横速度为 600~800，第四帧纵速度改为-1400
如果这帧没有按下跳，则继续用g减速直到落地。</p>
<p>小结：所以跳起第3帧横速度决定跳的高低，一般可以控制横速度达到少/多跳高一点以节省时间；所以空跳的原因就是顶砖块在跳起4帧之内。</p>
<p>当你要踩怪时，不管何时，如果前一帧按下了跳，踩怪后纵速度改为-1600，如果这帧没有按下跳，则纵速度改为-1000。</p>
<p>撞墙前后速度值变化（不一定准）
-100 0
-200 66
-300 133
-400 200
-500 266
-600 333
-700 400
-900 533
-1000 600
-1100 666
-1200 733
-1300 800
-1400 866
规律就是撞前+100，撞后+66，所以通过控制纵速度可以达到更快</p>
<hr>
<h4 id="其他的所有吧友问题可以访问网页httpstiebabaiducomp2433434207" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96%e7%9a%84%e6%89%80%e6%9c%89%e5%90%a7%e5%8f%8b%e9%97%ae%e9%a2%98%e5%8f%af%e4%bb%a5%e8%ae%bf%e9%97%ae%e7%bd%91%e9%a1%b5httpstiebabaiducomp2433434207" class="header-mark"></a>其他的所有吧友问题可以<a href="https://tieba.baidu.com/p/2433434207" target="_blank" rel="noopener noreffer">访问网页</a>！</h4><p><strong>WARNING:本文章转自@快乐mario的百度贴吧账号，如有二次转载会告知原作者！！！</strong></p>
<p>博客随缘更新嗷qwq</p>]]></description>
</item></channel>
</rss>
